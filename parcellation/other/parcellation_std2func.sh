#!/bin/bash

##QSUB
#list_subjects=(PS041A); for s in ${list_subjects[@]}; do qsub -o /project/3011154.01/MJ/logs -e /project/3011154.01/MJ/logs -N parcel_${s} -v subject=${s} -l 'walltime=00:20:00,mem=2gb' /project/3011154.01/MJ/scripts/parcellation/parcellation_std2func.sh; done

export FSLDIR=/opt/fsl/5.0.10
.  ${FSLDIR}/etc/fslconf/fsl.sh

junk=/project/3011154.01/MJ/junk
#working=/project/3011154.01/MJ/FC
working=/project/3011154.01/MJ/teststuff
cd ${working}

#

cd ${subject}

#-----------------------------------------------------------------#

mkdir -p $(pwd)/rs/parcellation/intermediate

# MNI152_T1_1mm_brain is overlaid with Harvard_Oxford subcortical atlas in fsleyes to define masks per the FSL tutorial #1 section 2. Putamen was divided into anterior and posterior by multiplying left and right sides with anterior and posterior sectors from the command line. These masks are brought into subject specific functional space via non-linear transformations. A mask of the lateral ventricles is subtracted from the caudate mask in order to improve sensitivity. Thresholds for binarization are arbitrarily selected based on visual inspection.

# Invert structural 2 standard warp field generated by FEAT
${FSLDIR}/bin/invwarp \
	-w $(pwd)/rs/prepro.feat/reg/highres2standard_warp \
	-o $(pwd)/rs/prepro.feat/reg/standard2highres_warp \
	-r $(pwd)/rs/prepro.feat/reg/highres
inverted_transform=$(pwd)/rs/prepro.feat/reg/standard2highres_warp

# Apply the inverted transform to each mask. Add together right and left masks of the same subcortical structure. Threhshold and binarize the combined mask. 

#Putamen

putamen_seed=1
if [ ${putamen_seed} -eq 1 ]
then

subsections=(ant post)
for i in ${subsections[@]}; do

	${FSLDIR}/bin/applywarp \
		-i /project/3011154.01/MJ/FC/designs/parcellation/std_bg_masks/l_puta_${i} \
		-r $(pwd)/rs/prepro.feat/example_func \
		-o $(pwd)/rs/parcellation/intermediate/l_puta_${i}_func \
		-w ${inverted_transform} \
		--postmat=$(pwd)/rs/prepro.feat/reg/highres2example_func.mat
	l_puta=$(pwd)/rs/parcellation/intermediate/l_puta_${i}_func

	${FSLDIR}/bin/applywarp \
		-i /project/3011154.01/MJ/FC/designs/parcellation/std_bg_masks/r_puta_${i} \
		-r $(pwd)/rs/prepro.feat/example_func \
		-o $(pwd)/rs/parcellation/intermediate/r_puta_${i}_func \
		-w ${inverted_transform} \
		--postmat=$(pwd)/rs/prepro.feat/reg/highres2example_func.mat
	r_puta=$(pwd)/rs/parcellation/intermediate/r_puta_${i}_func

	${FSLDIR}/bin/fslmaths ${l_puta} -add ${r_puta} $(pwd)/rs/parcellation/intermediate/puta_${i}_func
	puta=$(pwd)/rs/parcellation/intermediate/puta_${i}_func
	${FSLDIR}/bin/fslmaths ${puta} -thr 0.7 -bin $(pwd)/rs/parcellation/puta_${i}_func_thrbin
	puta=$(pwd)/rs/parcellation/puta_${i}_func_thrbin

done

fi

puta_ant=$(pwd)/rs/parcellation/puta_ant_func_thrbin
puta_post=$(pwd)/rs/parcellation/puta_post_func_thrbin

#Caudate

caudate_seed=1
if [ ${caudate_seed} -eq 1 ]
then

${FSLDIR}/bin/applywarp \
	-i /project/3011154.01/MJ/FC/designs/parcellation/std_bg_masks/l_caud_ant \
	-r $(pwd)/rs/prepro.feat/example_func \
	-o $(pwd)/rs/parcellation/intermediate/l_caud_func \
	-w ${inverted_transform} \
	--postmat=$(pwd)/rs/prepro.feat/reg/highres2example_func.mat
l_caud=$(pwd)/rs/parcellation/intermediate/l_caud_func

${FSLDIR}/bin/applywarp \
	-i /project/3011154.01/MJ/FC/designs/parcellation/std_bg_masks/r_caud_ant \
	-r $(pwd)/rs/prepro.feat/example_func \
	-o $(pwd)/rs/parcellation/intermediate/r_caud_func \
	-w ${inverted_transform} \
	--postmat=$(pwd)/rs/prepro.feat/reg/highres2example_func.mat
r_caud=$(pwd)/rs/parcellation/intermediate/r_caud_func

${FSLDIR}/bin/fslmaths ${l_caud} -add ${r_caud} $(pwd)/rs/parcellation/intermediate/caud_func
caud=$(pwd)/rs/parcellation/intermediate/caud_func
${FSLDIR}/bin/fslmaths ${caud} -thr 0.6 -bin $(pwd)/rs/parcellation/caud_func_thrbin
caud=$(pwd)/rs/parcellation/caud_func_thrbin

	# The caudate mask in functional space tends to overlap with the lateral ventricles. We attempt to fix that by constructing a non-thresholded binarized mask of the lateral ventricles that can be subtracted from the caudate mask, with the intent that the avg ts extracted with the caudate mask will be less biased by presence of csf-voxels.

${FSLDIR}/bin/applywarp \
	-i /project/3011154.01/MJ/FC/designs/parcellation/std_bg_masks/l_latvent \
	-r $(pwd)/rs/prepro.feat/example_func \
	-o $(pwd)/rs/parcellation/intermediate/l_latvent_func \
	-w ${inverted_transform} \
	--postmat=$(pwd)/rs/prepro.feat/reg/highres2example_func.mat
l_latvent=$(pwd)/rs/parcellation/intermediate/l_latvent_func

${FSLDIR}/bin/applywarp \
	-i /project/3011154.01/MJ/FC/designs/parcellation/std_bg_masks/r_latvent \
	-r $(pwd)/rs/prepro.feat/example_func \
	-o $(pwd)/rs/parcellation/intermediate/r_latvent_func \
	-w ${inverted_transform} \
	--postmat=$(pwd)/rs/prepro.feat/reg/highres2example_func.mat
r_latvent=$(pwd)/rs/parcellation/intermediate/r_latvent_func

${FSLDIR}/bin/fslmaths ${l_latvent} -add ${r_latvent} $(pwd)/rs/parcellation/intermediate/latvent_func
latvent=$(pwd)/rs/parcellation/intermediate/latvent_func
${FSLDIR}/bin/fslmaths ${latvent} -bin $(pwd)/rs/parcellation/latvent_func_thrbin
latvent=$(pwd)/rs/parcellation/latvent_func_thrbin

${FSLDIR}/bin/fslmaths ${caud} -sub ${latvent} -bin $(pwd)/rs/parcellation/caudsubvent_func_thrbin

fi

#NAcc

nacc_seed=1
if [ ${nacc_seed} -eq 1 ]
then

${FSLDIR}/bin/applywarp \
	-i /project/3011154.01/MJ/FC/designs/parcellation/std_bg_masks/l_accu \
	-r $(pwd)/rs/prepro.feat/example_func \
	-o $(pwd)/rs/parcellation/intermediate/l_accu_func \
	-w ${inverted_transform} \
	--postmat=$(pwd)/rs/prepro.feat/reg/highres2example_func.mat
l_accu=$(pwd)/rs/parcellation/intermediate/l_accu_func

${FSLDIR}/bin/applywarp \
	-i /project/3011154.01/MJ/FC/designs/parcellation/std_bg_masks/r_accu \
	-r $(pwd)/rs/prepro.feat/example_func \
	-o $(pwd)/rs/parcellation/intermediate/r_accu_func \
	-w ${inverted_transform} \
	--postmat=$(pwd)/rs/prepro.feat/reg/highres2example_func.mat
r_accu=$(pwd)/rs/parcellation/intermediate/r_accu_func

${FSLDIR}/bin/fslmaths ${l_accu} -add ${r_accu} $(pwd)/rs/parcellation/intermediate/accu_func
accu=$(pwd)/rs/parcellation/intermediate/accu_func
${FSLDIR}/bin/fslmaths ${accu} -thr 0.45 -bin $(pwd)/rs/parcellation/accu_func_thrbin
accu=$(pwd)/rs/parcellation/accu_func_thrbin

fi

#-----------------------------------------------------------------#

# Extract timeseries for each seed. Write to a single textfile

extract_ts=1
if [ ${extract_ts} -eq 1 ]
then

list_masks=(puta_ant puta_post caudsubvent accu)
for m in ${list_masks[@]}; do
	${FSLDIR}/bin/fslmeants \
		-i $(pwd)/rs/nui_hp/${subject}_nuireg_hp \
		-o $(pwd)/rs/parcellation/${subject}_${m}_ts.txt \
		-m $(pwd)/rs/parcellation/${m}*
done

paste rs/parcellation/*puta_ant_ts.txt rs/parcellation/*puta_post_ts.txt rs/parcellation/*caud*_ts.txt rs/parcellation/*accu_ts.txt > rs/parcellation/${subject}_allseeds_ts.txt

fi

# Time for dem stats

# In order to check that registration of masks to functional space is good, copy the following command to the command line...
#cd /project/3011154.01/MJ/FC/PS022B; fsleyes rs/nui_hp/PS022B_nuireg_hp rs/parcellation/accu_func_thrbin -cm green rs/parcellation/caudsubvent_func_thrbin -cm blue rs/parcellation/caud_func_thrbin -cm yellow rs/parcellation/puta_ant_func_thrbin -cm red rs/parcellation/puta_post_func_thrbin -cm red


