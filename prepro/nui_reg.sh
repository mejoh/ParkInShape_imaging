#!/bin/bash

# Extract regressor ts from CSF and WM masks. Nuisance regress with motion parameters against functional data. Residuals are highpass filtered. Additional smoothing is applied

##QSUB
#list_subjects=(sub-001 sub-002 sub-003 sub-004 sub-061 sub-062); for s in ${list_subjects[@]}; do qsub -o /project/3011154.01/MJ/logs -e /project/3011154.01/MJ/logs -N nuireg_${s} -v subject=${s} -l 'walltime=02:00:00,mem=6gb' ~/scripts/prepro/nui_reg.sh; done

export FSLDIR=/opt/fsl/6.0.0
.  ${FSLDIR}/etc/fslconf/fsl.sh

junk=/project/3011154.01/MJ/junk
working=/project/3011154.01/MJ/FC
#working=/project/3011154.01/MJ/teststuff
cd ${working}
cd ${subject}
mkdir -p rs/nui_hp

segment=1
csf_nuisanceregressor=1
wm_nuisanceregressor=1
ts_extraction=1
nuisance_regression=1
temporal_filtering=1
add_smooth=0

#------------------------------------------------------------------------------#

# Tissue-type segmentation

if [ ${segment} -eq 1 ]
then

${FSLDIR}/bin/fast \
	-S 1 -t 1 -o $(pwd)/rs/nui_hp/${subject}_highres -n 3 $(pwd)/ana/${subject}_ana_brain.nii.gz

fi

#------------------------------------------------------------------------------#

# CSF
# The csf-mask from tissue-type segmentation is multiplied with a back-transformed mask of the lateral ventricles defined in MNI152 space

if [ ${csf_nuisanceregressor} -eq 1 ]
then

	# Erode CSF mask
${FSLDIR}/bin/fslmaths \
	$(pwd)/rs/nui_hp/${subject}_highres_pve_0.nii.gz \
	-ero \
	$(pwd)/rs/nui_hp/${subject}_csf_highres_ero.nii.gz

	# Non-linearly register ventricle mask to highres
${FSLDIR}/bin/invwarp \
	-w $(pwd)/rs/prepro.feat/reg/highres2standard_warp \
	-o $(pwd)/rs/prepro.feat/reg/standard2highres_warp \
	-r $(pwd)/rs/prepro.feat/reg/highres

${FSLDIR}/bin/applywarp \
 	-i /project/3011154.01/MJ/FC/designs/preprocessing/VentricleMask \
 	-o $(pwd)/rs/nui_hp/VentricleMask_highres \
 	-r $(pwd)/rs/prepro.feat/reg/highres \
 	-w $(pwd)/rs/prepro.feat/reg/standard2highres_warp

	# Multiply ventricle maks with eroded CSF image generated by FAST. Threshold and binarize
${FSLDIR}/bin/fslmaths \
 	$(pwd)/rs/nui_hp/VentricleMask_highres \
 	-mul $(pwd)/rs/nui_hp/${subject}_csf_highres_ero \
 	-thr 1 \
 	-bin \
 	$(pwd)/rs/nui_hp/${subject}_csfmask_highres

	# Invert the transformation from functional to highres. FEAT does not calculate this.
${FSLDIR}/bin/convert_xfm \
 	-omat $(pwd)/rs/prepro.feat/reg/highres2example_func.mat \
 	-inverse $(pwd)/rs/prepro.feat/reg/example_func2highres.mat

	# Linearly register the CSF mask to functional space
${FSLDIR}/bin/flirt \
	-in $(pwd)/rs/nui_hp/${subject}_csfmask_highres \
	-ref $(pwd)/rs/prepro.feat/reg/example_func \
	-applyxfm \
	-init $(pwd)/rs/prepro.feat/reg/highres2example_func.mat \
	-out $(pwd)/rs/nui_hp/${subject}_csfmask_func

	# Threshold and binarize. Lenient threshold due to our previous steps
${FSLDIR}/bin/fslmaths \
	$(pwd)/rs/nui_hp/${subject}_csfmask_func \
	-thr 0.1 \
	-bin \
	$(pwd)/rs/nui_hp/${subject}_csfmask_func_thrbin

fi

csf_mask=$(pwd)/rs/nui_hp/${subject}_csfmask_func_thrbin

#------------------------------------------------------------------------------#

# WM
# ROI of WM defined in MNI152 placed in genu of corpus callosum (voxel locations, MNI152: 89 90 87). Spherical, 4mm

if [ ${wm_nuisanceregressor} -eq 1 ]
then

# Register WM mask to functional space
	# Select a pre-made mask
wm_roi=/project/3011154.01/MJ/FC/designs/preprocessing/wm_roi

	# Option 1: LINEAR
#${FSLDIR}/bin/flirt \
#	-in ${wm_roi} \
#	-ref $(pwd)/rs/prepro.feat/reg/example_func.nii.gz \
#	-applyxfm \
#	-init $(pwd)/rs/prepro.feat/reg/standard2example_func.mat \
#	-out $(pwd)/rs/nui_hp/wm_roi_func

	# Option 2: NON-LINEAR
${FSLDIR}/bin/invwarp \
	-w $(pwd)/rs/prepro.feat/reg/highres2standard_warp \
	-o $(pwd)/rs/prepro.feat/reg/standard2highres_warp \
	-r $(pwd)/rs/prepro.feat/reg/highres

${FSLDIR}/bin/applywarp \
	-i ${wm_roi} \
	-r $(pwd)/rs/prepro.feat/reg/example_func \
	-o $(pwd)/rs/nui_hp/wm_roi_func \
	-w $(pwd)/rs/prepro.feat/reg/standard2highres_warp \
	--postmat=$(pwd)/rs/prepro.feat/reg/highres2example_func.mat

# Binarize
${FSLDIR}/bin/fslmaths \
	rs/nui_hp/wm_roi_func \
	-bin \
	rs/nui_hp/wm_roi_func

fi

wm_mask=$(pwd)/rs/nui_hp/wm_roi_func

#------------------------------------------------------------------------------#

# GSR
# Using the whole-brain mask created as part of ICA-AROMA. Not decided whether I ought to create a new one for use in GSR yet.

#wholebrainmask=$(pwd)/rs/ica_aroma/mask

#------------------------------------------------------------------------------#

# Extract mean timeseries from masks and write to text

##########aroma_denoised=$(pwd)/rs/ica_aroma/denoised*.nii.gz
aroma_denoised=$(pwd)/rs/prepro.feat/filtered_func_data

if [ ${ts_extraction} -eq 1 ]
then

# CSF
${FSLDIR}/bin/fslmeants \
	-i ${aroma_denoised} \
	-m ${csf_mask} \
	--no_bin \
	-o $(pwd)/rs/nui_hp/${subject}_csf_ts.txt
csf_ts=$(pwd)/rs/nui_hp/${subject}_csf_ts.txt

# WM
${FSLDIR}/bin/fslmeants \
	-i ${aroma_denoised} \
	-m ${wm_mask} \
	--no_bin \
	-o $(pwd)/rs/nui_hp/${subject}_wm_ts.txt
wm_ts=$(pwd)/rs/nui_hp/${subject}_wm_ts.txt

# Global signal
#${FSLDIR}/bin/fslmeants \
#	-i ${aroma_denoised} \
#	-m ${wholebrainmask} \
#	--no_bin \
#	-o $(pwd)/rs/nui_hp/${subject}_gs_ts.txt
#gs_ts=$(pwd)/rs/nui_hp/${subject}_gs_ts.txt

# Write ts of csf, wm, global signal, and motion to text file
	# Presently not included: ${gs_ts}

###################motion24=$(pwd)/rs/prepro.feat/mc/*VX24.par

#################paste ${csf_ts} ${wm_ts} ${motion24} > $(pwd)/rs/nui_hp/${subject}_nuisance_ts.txt
paste ${csf_ts} ${wm_ts} > $(pwd)/rs/nui_hp/${subject}_nuisance_ts.txt

fi

nuisance_ts=$(pwd)/rs/nui_hp/${subject}_nuisance_ts.txt

#------------------------------------------------------------------------------#

# Nuisance regression

# Regress out csf, wm, global signal (maybe), and motion

if [ ${nuisance_regression} -eq 1 ]
then

${FSLDIR}/bin/fsl_glm \
	-i ${aroma_denoised} \
	-d ${nuisance_ts} \
	--demean \
	--out_res=$(pwd)/rs/nui_hp/${subject}_nuireg.nii.gz

# fsl_glm breaks header info. Use fslcpgeom to fix it
${FSLDIR}/bin/fslcpgeom ${aroma_denoised} ${nui_reg}

fi

nui_reg=$(pwd)/rs/nui_hp/${subject}_nuireg.nii.gz

#------------------------------------------------------------------------------#

# Temporal filtering: highpass only, cutoff-frequency of 0.007Hz

if [ ${temporal_filtering} -eq 1 ]
then

# The -bptf option of fslmaths which we use to highpass filter also removes the mean. Here, we calculate the mean in order to add it after filtering

${FSLDIR}/bin/fslmaths ${aroma_denoised} \
	-Tmean \
	$(pwd)/rs/nui_hp/${subject}_tempMean_rest

# Gaussian filter requires calculating sigma (std deviation): 
# sigma [ vols ] = ( 1 / cutoff_freq[Hz] ) / ( 2.35 * TR )
# Where ( 1 / cutoff_freq[Hz] ) = FWHM [ seconds ], 2.35 is a conversion factor from FWHM to sigma, and TR is a conversion factor from seconds to volumes. FEAT uses the number 2 as an approximation of the FWHM>Sigma conversion factor rather than 2.35 due to characteristics of the particular filter that is used.
# ( 1 / 0.007 ) / ( 2 * TR ) ~= 64.9
# Alternative implementation (equivalent to above): sigma [vols] = 1 / (2 * TR * cutoff_in_hz)

${FSLDIR}/bin/fslmaths ${nui_reg} \
	-bptf 65 -1 \
	-add $(pwd)/rs/nui_hp/${subject}_tempMean_rest \
	$(pwd)/rs/prepro.feat/${subject}_nuireg_hp.nii.gz


fi

#------------------------------------------------------------------------------#

# Additional smoothing
# This step could in principle be placed anywhere in the preprocessing. Not sure that this is the right placement.

if [ ${add_smooth} -eq 1 ]
then

# Pythagoras theorem: z = sqrt(x² + y²) or z² = x² + y²
# Let z be desired smoothing. Let x be prior smoothing. Let y be required additional smoothing
# We know z and x, and therefore need to solve for y
# Thus...
# 6² = 3.3² + y²
# 36 = 10.89 + y²
# 25.11 = y²
# 5.011 ≃ y
# Values above are now in FWHM (mm). But we need sigma (mm)
# Sigma (mm) = FWHM / 2.3548
# 2.1279938848309835 = 5.011 / 2.3548

sigma=2.1279938848309835

${FSLDIR}/bin/fslmaths $(pwd)/rs/prepro.feat/${subject}_nuireg_hp -s ${sigma} $(pwd)/rs/prepro.feat/${subject}_nuireg_hp_addsmth

fi











